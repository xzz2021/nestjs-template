/*
约定  规范

1. 所有column字段小写开头
2. 映射到数据库的字段应该以 蛇形命名  使用@map()







*/


generator client {
  provider        = "prisma-client-js"
  output          = "./client/postgresql"
  previewFeatures = []
    // Optional
  moduleFormat           = "esm"
  generatedFileExtension = "ts"
  importFileExtension    = "ts"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_DATABASE_URL")
}

generator prismaClassGenerator  {
  provider      = "prisma-class-generator"
  useValidation = true // 是否添加 class-validator 装饰器
  dryRun        = false // ❗❗ 加上这个才能真正生成文件
  output        = "./dto"
}

// generator caslAdapter {
//   provider = "node node_modules/@casl/prisma/generator.js" // <--- important to add this
//   clientLib = "./client/postgresql" // optional and by default equals to @prisma/client
//   output  = "./pg.casl.adapter.ts"
// }


model User {
  id                Int                @id @default(autoincrement())
  username          String             @db.VarChar(50)
  password          String             @db.VarChar(255)
  avatar            String?            @db.VarChar(255)
  email             String?            @db.VarChar(50)
  phone             String             @unique @db.Char(11)
  birthday          String?
  gender            String?
  status            Boolean            @default(true)
  wechatId          String?            @unique @map("wechat_id")
  wechatInfo        WechatInfo?        @relation(fields: [wechatId], references: [unionid])
  cart              Cart[]
  order             OrderInfo[]
  wallet            Wallet?            @relation("UserWallet")
  point             Point?             @relation("UserPoint")
  fileInfo          FileInfo[]
  contactInfo       ContactInfo[]
  addressInfo       AddressInfo[]
  invoiceInfo       InvoiceInfo[]
  paymentCredential PaymentCredential? @relation("UserPaymentCredential")
  pointRecords      PointRecord[]
  // userCoupons       UserCoupon[]
  payOrderLogs      PayOrderLog[]
  isDeleted         Boolean            @default(false) @map("is_deleted")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")

  //  员工部分

  departmentId     Int?              @map("department_id")
  department       Department?       @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  notices          Notice[]
  noticeRecipients NoticeRecipient[]
  roles            Role[]

  //  支付密码
  payPassword PayPassword?
  BillRecord  BillRecord[]

  auditLogs    AuditLog[]   // 主动埋点用户操作日志


  @@index([phone])
  @@map("user")
}

model WechatInfo {
  id           Int      @id @default(autoincrement())
  accessToken  String   @map("access_token")
  refreshToken String   @map("refresh_token")
  openid       String
  unionid      String   @unique
  nickname     String
  headimgurl   String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User?

  @@index([openid])
  @@map("wechat_info")
}

//  用户和角色关系  如果 删除  角色  会出现外键约束  
//  所以 应当使用 显式 多对多关系  定义  显式中间表  明确添加 级联的 操作
//  凡是多对多关系   尽量使用 显式中间表
model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique @db.VarChar(50)
  remark      String?      @db.VarChar(100)
  code        String       @unique @db.VarChar(50)
  status      Boolean      @default(true)
  isDeleted   Boolean      @default(false) @map("is_deleted")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  deletedAt   DateTime?    @map("deleted_at")
  permissions Permission[] @relation("RolePermissions")
  users       User[]
  menus       Menu[]       @relation("RoleMenus")

  @@index([isDeleted])
  @@map("role")
}

model Department {
  id        Int          @id @default(autoincrement())
  name      String       @db.VarChar(50)
  status    Boolean      @default(true)
  remark    String?      @db.VarChar(100)
  isDeleted Boolean      @default(false) @map("is_deleted")
  parentId  Int?         @map("parent_id")
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  deletedAt DateTime?    @map("deleted_at")
  users     User[]
  parent    Department?  @relation("DepartmentSelf", fields: [parentId], references: [id])
  children  Department[] @relation("DepartmentSelf")

  @@index([parentId])
  @@index([isDeleted])
  @@map("department")
}

model Menu {
  id             Int          @id @default(autoincrement())
  name           String       @db.VarChar(50)
  path           String       @db.VarChar(100)
  redirect       String?      @db.VarChar(100)
  type           Int? // 当type=1时说明是子组件 而不是目录  用于回显菜单类型
  component      String       @db.VarChar(100)
  sort           Int?         @default(0)
  status         Boolean      @default(true)
  isDeleted      Boolean      @default(false) @map("is_deleted")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @default(now()) @updatedAt @map("updated_at")
  deletedAt      DateTime?    @map("deleted_at")
  meta           Meta?
  title      String?   @db.VarChar(50)
  // meta Json?      @default("{}")
  permissionList Permission[]
  roles          Role[]       @relation("RoleMenus")
  parentId       Int?         @map("parent_id")
  parent         Menu?        @relation("MenuSelf", fields: [parentId], references: [id])
  children       Menu[]       @relation("MenuSelf")

  @@index([parentId])
  @@index([isDeleted])
  @@index([path])
  @@map("menu")
}

model Meta {
  id         Int       @id @default(autoincrement())
  title      String?   @db.VarChar(50)
  icon       String?   @db.VarChar(50)
  affix      Boolean   @default(false)
  activeMenu String?   @map("active_menu") @db.VarChar(50)
  alwaysShow Boolean   @default(false) @map("always_show")
  breadcrumb Boolean   @default(true)
  canTo      Boolean   @default(false) @map("can_to")
  hidden     Boolean   @default(false)
  noCache    Boolean   @default(false) @map("no_cache")
  noTagsView Boolean   @default(false) @map("no_tags_view")
  isDeleted  Boolean   @default(false) @map("is_deleted")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")
  menuId     Int       @unique @map("menu_id")
  menu       Menu      @relation(fields: [menuId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("meta")
}

model Permission {
  id        Int       @id @default(autoincrement())
  // label     String    @db.VarChar(50)
  code     String     @unique @db.VarChar(50)  // 权限标识，例如 “user:add”
  name      String    @db.VarChar(50) //  名称可重复 code 必须唯一  配合控制器api 实现唯一性控制
  type      String    @default("action") // 类型: "menu", "action", "api"
  route     String? // 对应的后端 API（可选）

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  menuId    Int       @map("menu_id")
  menu      Menu      @relation(fields: [menuId], references: [id], onDelete: Cascade)
  roles     Role[]    @relation("RolePermissions")

  @@unique([menuId, code])
  @@map("permission")
}

model Notice {
  id          Int               @id @default(autoincrement())
  title       String            @db.VarChar(100)
  type        String            @db.VarChar(50)
  content     String            @db.Text
  isPublished Boolean           @default(false) @map("is_published")
  isDeleted   Boolean           @default(false) @map("is_deleted")
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  deletedAt   DateTime?         @map("deleted_at")
  creatorId   Int               @map("creator_id")
  creator     User              @relation(fields: [creatorId], references: [id])
  recipients  NoticeRecipient[]

  @@index([creatorId])
  @@index([isDeleted])
  @@index([isPublished])
  @@map("notice")
}

model NoticeRecipient {
  id        Int      @id @default(autoincrement())
  noticeId  Int      @map("notice_id")
  userId    Int      @map("user_id")
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")
  notice    Notice   @relation(fields: [noticeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([noticeId, userId])  // 复合唯一约束
  @@index([isRead])
  @@map("notice_recipient")
  // @@id(name: "noticeRecipientId", [noticeId, userId])    复合 ID

}

// 字典模块

model Dictionary {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(50)
  code        String     @unique @db.VarChar(50)
  sort        Int        @default(0)
  description String?    @db.VarChar(200)
  status      Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  entries     DicEntry[]

  @@index([code])
  @@map("dictionary")
  // @@unique([sort, code])
  // 复合键  Prisma Client 查询中此字段的名称为 name_code
  // @@id([name, code])
  // @@id(name: "fullName", fields: [name, code])  // 自定义复合键名称
}

model DicEntry {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(50)
  code         String     @db.VarChar(50)
  sort         Int        @default(0)
  status       Boolean    @default(true)
  description  String?    @db.VarChar(200)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt @map("updated_at")
  dictionaryId Int        @map("dictionary_id")
  dictionary   Dictionary @relation(fields: [dictionaryId], references: [id], onDelete: Cascade)

  // @@unique([dictionaryId, code])
  @@index([code])
  @@map("dic_entry")
}




