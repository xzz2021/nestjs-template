/**
 * 约定  规范
 * 1. 所有column字段小写开头
 * 2. 映射到数据库的字段应该以 蛇形命名  使用@map()
 * 3. 使用显式多对多关系表，明确级联操作
 * 4. 为常用查询字段添加合适的索引
 * 5. 使用枚举类型替代魔法数字
 */

generator client {
  provider               = "prisma-client-js"
  output                 = "./client/postgresql"
  previewFeatures        = ["driverAdapters"]
  // Optional
  moduleFormat           = "esm"
  generatedFileExtension = "ts"
  importFileExtension    = "ts"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_DATABASE_URL")
}

generator prismaClassGenerator {
  provider      = "prisma-class-generator"
  useValidation = true // 是否添加 class-validator 装饰器
  dryRun        = false // ❗❗ 加上这个才能真正生成文件
  output        = "./dto"
}

// generator caslAdapter {
//   provider = "node node_modules/@casl/prisma/generator.js" // <--- important to add this
//   clientLib = "./client/postgresql" // optional and by default equals to @prisma/client
//   output  = "./pg.casl.adapter.ts"
// }

// 使用常量字符串替代枚举，避免后续修改的限制
// 这些值在应用层定义，数据库层只存储字符串

model User {
  id         Int         @id @default(autoincrement())
  username   String      @db.VarChar(50)
  password   String      @db.VarChar(255)
  avatar     String?     @db.VarChar(255)
  email      String?     @unique @db.VarChar(50)
  phone      String      @unique @db.Char(11)
  birthday   String?
  gender     String?     @default("OTHER")
  status     Boolean     @default(true)
  wechatId   String?     @unique @map("wechat_id")
  wechatInfo WechatInfo? @relation(fields: [wechatId], references: [unionid])

  isDeleted Boolean  @default(false) @map("is_deleted")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 显式多对多关系
  roles UserRole[]

  departments UserDepartment[]

  // 通知相关
  createdNotices   Notice[]
  noticeRecipients NoticeRecipient[]

  operationLogs UserOperationLog[]

  @@index([phone])
  @@index([email])
  @@map("user")
}

model WechatInfo {
  id           Int      @id @default(autoincrement())
  accessToken  String   @map("access_token")
  refreshToken String   @map("refresh_token")
  openid       String
  unionid      String   @unique
  nickname     String
  headimgurl   String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User?

  @@index([openid])
  @@index([unionid])
  @@map("wechat_info")
}

model Role {
  id     Int     @id @default(autoincrement())
  name   String  @unique @db.VarChar(50)
  code   String  @unique @db.VarChar(50)
  status Boolean @default(true)
  remark String? @db.VarChar(100)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  users UserRole[]

  // 显式多对多关系
  permissions RolePermission[]
  menus       RoleMenu[]

  @@index([code, status])
  @@map("role")
}

// 用户角色关联表 - 显式多对多关系
model UserRole {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  roleId    Int      @map("role_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // updatedBy Int?     @map("updated_by")
  // updatedByUser User? @relation(fields: [updatedBy], references: [id], onDelete: SetNull)
  // 当删除  某个 角色  或 用户时 需要 级联删除 用户角色关联表
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@map("user_role")
}

model Permission {
  id       Int     @id @default(autoincrement())
  name     String  @db.VarChar(50) // 名称可重复 code 必须唯一  配合控制器api 实现唯一性控制
  code     String  @db.VarChar(50) // 权限标识，例如 "add/update"
  value    String? @db.VarChar(50) // 权限值，可选
  resource String  @db.VarChar(50) // 资源(user/menu/dictionary)
  // type      String          @default("ACTION") // 使用字符串常量
  // route     String?         // 对应的后端 API（可选）

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  menuId Int  @map("menu_id")
  menu   Menu @relation(fields: [menuId], references: [id], onDelete: Cascade)

  // 显式多对多关系
  roles RolePermission[]

  @@unique([menuId, code])
  @@map("permission")
}

// 角色权限关联表 - 显式多对多关系
model RolePermission {
  id           Int      @id @default(autoincrement())
  roleId       Int      @map("role_id")
  permissionId Int      @map("permission_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permission")
}

model Department {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(50)
  path      String   @db.VarChar(512)
  status    Boolean  @default(true)
  remark    String?  @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  parentId Int?        @map("parent_id")
  parent   Department? @relation("DepartmentSelf", fields: [parentId], references: [id], onDelete: SetNull)

  children Department[]     @relation("DepartmentSelf")
  users    UserDepartment[]

  // 使用复合唯一约束，包括一个虚拟字段
  @@unique([name, parentId], name: "unique_department_name_parent")
  @@map("department")
}

model UserDepartment {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  departmentId Int      @map("department_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // 当删除  某个 部门  或 用户时 需要 级联删除 用户部门关联表
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@unique([userId, departmentId])
  @@map("user_department")
}

model Menu {
  id        Int     @id @default(autoincrement())
  name      String  @unique @db.VarChar(50)
  path      String  @db.VarChar(100)
  redirect  String? @db.VarChar(100)
  type      Int? // 当type=1时说明是子组件 而不是目录  用于回显菜单类型
  component String  @db.VarChar(100)
  sort      Int     @default(0)
  status    Boolean @default(true)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 必有的 1:1 关联关键点：非空 + 唯一
  // metaId Int  @unique
  // meta   Meta @relation(fields: [metaId], references: [id], onDelete: Cascade)

  meta Meta?

  permissionList Permission[]

  // 显式多对多关系
  roles RoleMenu[]

  parentId Int?   @map("parent_id")
  parent   Menu?  @relation("MenuSelf", fields: [parentId], references: [id], onDelete: SetNull)
  children Menu[] @relation("MenuSelf")

  @@index([path])
  @@map("menu")
}

model Meta {
  id         Int     @id @default(autoincrement())
  title      String? @db.VarChar(50)
  icon       String? @db.VarChar(50)
  affix      Boolean @default(false)
  activeMenu Boolean @default(false) @map("active_menu")
  alwaysShow Boolean @default(false) @map("always_show")
  breadcrumb Boolean @default(true)
  canTo      Boolean @default(false) @map("can_to")
  hidden     Boolean @default(false)
  noCache    Boolean @default(false) @map("no_cache")
  noTagsView Boolean @default(false) @map("no_tags_view")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 添加反向关系，当Menu被删除时，Meta也会被删除
  // 如果需要执行级联操作  必须在 被操作处 定义 关联字段  必须 @unique
  menuId Int  @unique
  menu   Menu @relation(fields: [menuId], references: [id], onDelete: Cascade)

  // menuName String? @unique @map("menu_name")
  // menu     Menu? @relation(fields: [menuName], references: [name], onDelete: Cascade)

  @@map("menu_meta")
}

// 角色菜单关联表 - 显式多对多关系
model RoleMenu {
  id        Int      @id @default(autoincrement())
  roleId    Int      @map("role_id")
  menuId    Int      @map("menu_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  menu Menu @relation(fields: [menuId], references: [id], onDelete: Cascade)

  @@unique([roleId, menuId])
  @@index([roleId])
  @@index([menuId])
  @@map("role_menu")
}

model Notice {
  id          Int     @id @default(autoincrement())
  title       String  @db.VarChar(100)
  type        String  @default("ANNOUNCEMENT") // 使用枚举类型
  content     String  @db.Text
  isPublished Boolean @default(false) @map("is_published")

  isDeleted Boolean   @default(false) @map("is_deleted")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  creatorId Int  @map("creator_id")
  creator   User @relation(fields: [creatorId], references: [id])

  recipients NoticeRecipient[]

  @@index([creatorId])
  @@index([isDeleted])
  @@index([isPublished])
  @@index([createdAt])
  @@map("notice")
}

model NoticeRecipient {
  id        Int      @id @default(autoincrement())
  noticeId  Int      @map("notice_id")
  userId    Int      @map("user_id")
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")
  notice    Notice   @relation(fields: [noticeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([noticeId, userId]) // 复合唯一约束
  @@index([isRead])
  @@map("notice_recipient")
}

// 字典模块
model Dictionary {
  id          Int               @id @default(autoincrement())
  name        String            @db.VarChar(50)
  code        String            @unique @db.VarChar(50)
  sort        Int               @default(0)
  description String?           @db.VarChar(200)
  status      Boolean           @default(true)
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  entries     DictionaryEntry[]
  // @@unique([sort, code])
  // 复合键  Prisma Client 查询中此字段的名称为 name_code

  @@index([code])
  @@map("dictionary")
}

model DictionaryEntry {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(50)
  code         String     @db.VarChar(50)
  sort         Int        @default(0)
  status       Boolean    @default(true)
  description  String?    @db.VarChar(200)
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  dictionaryId Int        @map("dictionary_id")
  dictionary   Dictionary @relation(fields: [dictionaryId], references: [id], onDelete: Cascade)

  @@index([code])
  @@unique([code, dictionaryId])
  @@map("dictionary_entry")
}


model UserOperationLog {
  id        Int     @id @default(autoincrement())
  userId    Int?     @map("user_id") 
  ip        String  @db.VarChar(50)
  userAgent String  @db.VarChar(150) @map("user_agent")
  method    String  @db.VarChar(10) 
  requestUrl String  @db.VarChar(150) @map("request_url")
  status    String  @db.VarChar(10) @map("status")

  responseMsg String? @db.VarChar(50) @map("response_msg")
  detailInfo   Json?   @map("detail_info")
  createdAt DateTime @default(now()) @map("created_at")
  duration  Int  
  user User? @relation(fields: [userId], references: [id])

  @@map("user_operation_log")
}

model SystemLog {
  id        Int     @id @default(autoincrement())
  level     String  @db.VarChar(50)
  service   String  @db.VarChar(50)
  message   String  @db.VarChar(50)
  duration  Int    
  context   Json?
  createdAt DateTime @default(now()) @map("created_at")

  @@map("system_log")
}