// request-log.interceptor.ts
import { Injectable, NestInterceptor, ExecutionContext, CallHandler, BadRequestException, NotFoundException, Logger, Inject } from '@nestjs/common';
import { Request, Response } from 'express';
import { Observable } from 'rxjs';
import { catchError, tap, map } from 'rxjs/operators';
import { extractIP } from '@/processor/utils/string';
import { PrismaClientInitializationError, PrismaClientKnownRequestError, PrismaClientValidationError } from '@/prisma/client/postgresql/runtime/library';
import { prismaErrorMsg } from '@/processor/utils/prismaError';

//  ËØ∑Ê±ÇÊã¶Êà™Âô®  Êèê‰æõÊó•ÂøóËÆ∞ÂΩï

interface JwtUser {
  id: number;
  username: string;
  phone: string;
}

// Extend Express Request to include user
interface RequestWithUser extends Request {
  user?: JwtUser;
}

@Injectable()
export class RequestLogInterceptor implements NestInterceptor {
  constructor() {}
  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {
    const ctx = context.switchToHttp();
    const request = ctx.getRequest<RequestWithUser>();
    const response = ctx.getResponse<Response>();
    const { method, url, ip = 'Êú™Áü•', headers, body } = request;
    const userAgent = headers['user-agent'] || '';
    const userPhone = request['user']?.phone || body?.phone || '';

    //  ÁôªÂΩïÊé•Âè£Ë¶ÅÂÅöÂçïÁã¨Â§ÑÁêÜ ,  Âõ†‰∏∫Ê≠§Êó∂ËøòÊ≤°ÊúâÁî®Êà∑Ë∫´‰ªΩ  Âè™ËÉΩÈÄöËøárequest.body Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØ  ÂÅáÂÆöÁôªÈôÜËÄÖ

    //  Ëé∑ÂèñÂΩìÂâç‰∏ä‰∏ãÊñá
    const start = Date.now();
    // if (url.includes('utils/log/') || url.includes('utils/online/user')) {
    //   return next.handle();
    // }

    return next.handle().pipe(
      map((data: any) => {
        // Â¶ÇÊûúËøîÂõûÁöÑÊòØÊñá‰ª∂ÊµÅ Âàô‰∏çÂåÖË£Ö
        if (data instanceof ReadableStream) {
          return data;
        }
        // Ëá™ÂÆö‰πâÂåÖË£ÖËøîÂõûÁöÑÊï∞ÊçÆ
        if (typeof data === 'object') {
          const aaa = {
            ...data,
            // code: data?.code || 200,
            timestamp: new Date().toISOString(), // Ê∑ªÂä†Êó∂Èó¥Êà≥
          };
          return aaa;
        }
        return { ...data, timestamp: new Date().toISOString() };
      }),
      //  tap ÊòØrxjs ÁöÑ Êìç‰ΩúÁ¨¶ Áî®‰∫éÂú®ÊµÅ‰∏≠ËøõË°åÊìç‰Ωú  Á±ª‰ºº‰∫éfinally
      tap((data: any) => {
        // Â¶ÇÊûúËøîÂõûÁöÑÊòØÊñá‰ª∂ÊµÅ Âàô‰∏çËÆ∞ÂΩïÊó•Âøó
        if (data instanceof ReadableStream) {
          return;
        }
        const statusCode = data.code || response.statusCode;

        // ÊûÑÂª∫Êó•ÂøóÊï∞ÊçÆ
        const logData = {
          resCode: statusCode,
          method,
          url,
          ip: extractIP(ip),
          userAgent: userAgent,
          // ...parseUserAgent(userAgent),
          feedbackMsg: data.message || '',
          duration: Date.now() - start,
        };

        // Â∞ÜÊó•ÂøóÂÜôÂÖ•Êï∞ÊçÆÂ∫ì

        // void this.loggerService.createRequestLog(logData, userPhone as string);
      }),

      // ÈîôËØØËØ∑Ê±ÇÁöÑÊó•ÂøóËÆ∞ÂΩï   //  Â¶ÇÊûú‰∏äÂ±ÇÊñπÊ≥ïÊ≤°Êúâ‰ΩøÁî®try catch ÂåÖË£π ÂàôÈîôËØØ‰ºöËµ∞Âà∞ËøôÈáå

      // eslint-disable-next-line @typescript-eslint/require-await
      catchError(async (err: any) => {
        // console.log('üöÄ ~ RequestLogInterceptor ~ catchError ~ err:', err);
        // const duration = Date.now() - start; // ËÆ°ÁÆóËØ∑Ê±ÇËÄóÊó∂
        let feedbackMsg = err?.message || 'ÁΩëÁªúÂºÇÂ∏∏';

        const isValidationErr = err instanceof BadRequestException; // ËøôÈáåÊöÇÊó∂Â∞ÜÂâçÁΩÆrequestËØ∑Ê±ÇÈîôËØØ Áªü‰∏ÄËØÜÂà´ÊàêdtoÈóÆÈ¢ò
        if (isValidationErr) {
          feedbackMsg = 'DTOÊï∞ÊçÆÂ≠óÊÆµÈîôËØØ: ' + err?.message;
        }
        const isPrismaValidationErr = err instanceof PrismaClientValidationError;
        if (isPrismaValidationErr) {
          const match = err.message.match(/Argument `[^`]+` is missing\./) || [err.message];

          feedbackMsg = 'Êï∞ÊçÆÂ∫ìÂÜôÂÖ•Â≠óÊÆµÈ™åËØÅÈîôËØØ: ' + match[0];
        }
        const isPrismaClientErr = err instanceof PrismaClientKnownRequestError;
        if (isPrismaClientErr) {
          feedbackMsg = prismaErrorMsg(err.code);
        }

        const isPrismaInitErr = err instanceof PrismaClientInitializationError;
        if (isPrismaInitErr) {
          feedbackMsg = 'Êï∞ÊçÆÂ∫ìËøûÊé•Â§±Ë¥•';
        }

        const logData = {
          method,
          url,
          ip: extractIP(ip),
          resCode: err?.status || 400,
          userAgent: userAgent,
          // ...parseUserAgent(userAgent),
          feedbackMsg, // ÈîôËØØ‰ø°ÊÅØ
          duration: Date.now() - start,
          //   errorStack: err.stack || '', // ÂèØÈÄâÔºöËÆ∞ÂΩïÈîôËØØÂ†ÜÊ†àÔºàË∞ÉËØïÁî®Ôºâ
        };

        //  PrismaClientKnownRequestError  ÂøÖÈ°ªÊòØË¶ÅÊìç‰ΩúÁöÑclientÂÆû‰æã

        //  ‰∏Ä‰∏™ÊòØlogÂÜôÂÖ•Êú¨Âú∞Êñá‰ª∂  ‰∏Ä‰∏™ÊòØÂÜôÂÖ•Êï∞ÊçÆÂ∫ì
        // await this.loggerService.createRequestLog(logData, userPhone as string, isPrismaClientErr && feedbackMsg == 'Êï∞ÊçÆÂ∫ìÊúçÂä°ÂºÇÂ∏∏'); // ÂÜôÂÖ•Êï∞ÊçÆÂ∫ì

        // err.stack   ÈîôËØØÂ†ÜÊ†à‰ø°ÊÅØ
        const stackName = err.stack.split(':')[0];
        // this.loggerService.createErrorLog({
        //   message: feedbackMsg,
        //   error: logData,
        //   context: stackName,
        // });

        return {
          //   code: err?.status || 400,
          message: feedbackMsg,
          error: logData,
          meta: { meta: err?.meta, stackName, ...err },
        };
        // throw new BadRequestException(feedbackMsg);

        // Â∞ÜÈîôËØØÁªßÁª≠ÊäõÂá∫Ôºå‰ª•‰æø NestJS ÁªßÁª≠Â§ÑÁêÜÂºÇÂ∏∏
        // return throwError(() => err);
        // return err?.response;
      }),
    );
  }
}
